/**
 * Sass versioning
 *
 * @description  Version your scss modules and test them at compile time
 * @author       @dominikwilkowski
 * @website      https://dominikwilkowski.github.io/sass-versioning/sassdoc/
 * @repository   https://github.com/dominikwilkowski/sass-versioning
 * @license      https://raw.githubusercontent.com/dominikwilkowski/sass-versioning/master/LICENSE GPL-3.0
 */

/// Logic for adding versioning to the global list `$versioning-glob-dependencies`
///
/// @param  {String}  $name          Name of the module adding this dependency
/// @param  {String}  $version       Version of the module adding this dependency
/// @param  {List}    $dependencies  Dependencies of this module
///
/// @example scss
/// 	$name: "accordion";
/// 	$version: "1.0.0";
/// 	$dependencies: (
/// 		("core", "2.0.0"),
/// 		("grid", "1.0.0"),
/// 	);
///
/// 	@include versioning-add( $name, $version, $dependencies );
///
/// @output The variable `$versioning-glob-dependencies` will be populated with the items that have been passed
///
/// @group Main
///
/// @access public
@mixin versioning-add( $name, $version, $dependencies ) {
	//checking types
	@if type-of( $name ) != "string" {
		@error "The first attribute of the versioning-add mixin needs to be a string. It's currently a #{ type-of( $name ) }";
	}

	@if type-of( $version ) != "string" {
		@error "The second attribute of the versioning-add mixin needs to be a string. It's currently a #{ type-of( $name ) }";
	}

	@if not valid( $version ) {
		@error "The version '#{ $version }'' is not a valid semver version."
	}

	@if type-of( $dependencies ) != "list" {
		@error "The third attribute of the versioning-add mixin needs to be a string. It's currently a #{ type-of( $name ) }";
	}

	//adding to global var
	$versioning-glob-dependencies: () !default;
	$item: (
		( $name, $version, $dependencies )
	);

	$versioning-glob-dependencies: append( $versioning-glob-dependencies, $item ) !global;
}


/// Logic for removing a single dependency from our list if that dependency e.g. doesn’t have a sass presence
///
/// @param  {String}  $name  Name of the module adding this dependency
///
/// @example scss
/// 	@include versioning-remove( 'animation' );
///
/// @output The variable `$versioning-glob-dependencies` will be stripped off our dependency
///
/// @group Main
///
/// @access public
@mixin versioning-remove( $remove ) {
	$versioning-glob-dependencies-new: ();

	//iterate over our dependencies
	@for $i from 1 through length( $versioning-glob-dependencies ) {
		$item: nth( $versioning-glob-dependencies, $i );
		$name: "#{nth( $item, 1 )}";
		$version: "#{nth( $item, 2 )}";
		$dependencies: nth( $item, 3 );
		$dependencies-new: ();

		@if( length( $dependencies ) > 0 ) {
			@for $o from 1 through length( $dependencies ) {
				$dependency: nth( $dependencies, $o );

				@if length( $dependency ) > 1 {
					$dependency-name: nth($dependency, 1);

					//only add the dependency if it’s not the one we’re trying to remove
					@if $dependency-name != $remove {
						$dependencies-new: append( $dependencies-new, $dependency );
					}
				}
			}
		}

		//adding the whole pack into the list
		$item-new: (
			( $name, $version, $dependencies-new )
		);

		$versioning-glob-dependencies-new: append( $versioning-glob-dependencies-new, $item-new );
	}

	//now overwriting the new list with the old one
	$versioning-glob-dependencies: $versioning-glob-dependencies-new !global;
}


/// Testing if all dependencies inside `$versioning-glob-dependencies` are satisfied
///
/// @example scss
/// 	@include versioning-check();
///
/// @group Main
///
/// @access public
@mixin versioning-check() {

	//iterating over each module inside $versioning-glob-dependencies
	@for $i from 1 through length( $versioning-glob-dependencies ) {
		$item: nth( $versioning-glob-dependencies, $i );
		$name: "#{nth( $item, 1 )}";
		$version: "#{nth( $item, 2 )}";
		$dependencies: nth( $item, 3 );

		//iterating over the dependencies of this module
		@if( length( $dependencies ) > 0 ) {
			@for $o from 1 through length( $dependencies ) {
				$dependency: nth( $dependencies, $o );

				//does this module even have dependencies?
				@if length( $dependency ) > 1 {
					$_found: false; //we have to assume the worst
					$dependency-name: nth($dependency, 1);
					$dependency-version: nth($dependency, 2);

					//iterate over all dependencies again to check if we have what is required
					@for $o from 1 through length( $versioning-glob-dependencies ) {
						$check-item: nth( $versioning-glob-dependencies, $o );
						$check-name: "#{nth( $check-item, 1 )}";
						$check-version: "#{nth( $check-item, 2 )}";

						//we found the item we depend on
						@if $check-name == $dependency-name {
							$_found: true; //ok we found the module

							//this is the version we need
							//let's convert our version string into integer for each section major, minor and patch
							$dependency-major: major( $dependency-version );
							$dependency-minor: minor( $dependency-version );
							$dependency-patch: patch( $dependency-version );

							//this is the version we found to have in our module list installed
							//let's convert our version string into integer for each section major, minor and patch
							$check-major: major( $check-version );
							$check-minor: minor( $check-version );
							$check-patch: patch( $check-version );

							//handling errors
							//[dependency-major](required version) > [check-major](version that is present)
							@if
								$dependency-major != $check-major or
								$dependency-major == $check-major and $dependency-minor > $check-minor or
								$dependency-major == $check-major and $dependency-patch > $check-patch
							{
								@error 'The module "#{$name}" requires "#{$dependency-name}" v#{$dependency-version}. But "#{$check-name}" v#{$check-version} included.'
							}
						}
					}

					@if $_found == false {
						@error 'The module "#{$name}" requires "#{$dependency-name}" v#{$dependency-version}. But the dependency is missing entirely';
					}
				}
			}

		}
	}
}